/*
 *  Author: Fabian Murer
 *  Model Name: System.spthy
 *  Status: DEVELOPMENTAL
 *
 *  Comments:
 */

theory System
begin

builtins: signing, hashing, symmetric-encryption


// Key Setup
rule Register_PKI:
    [ Fr(~sk) ]
  -->
    [ !SecretKey($A, ~sk), !PublicKey($A, pk(~sk)), Out(pk(~sk)) ]

rule Register_Shared:
    [ Fr(~shared) ]
  -->
    [ !SharedKey($A, $B, ~shared) ]

rule Reveal:
    [ !SecretKey(A, sk) ]
  --[ Reveal(A) ]->
    [ Out(sk) ]



// Initialisation

rule Init_Network:
    [ !PublicKey(S, pkS) ]
  --[ Create($N, 'Network'), SignerKey(pkS) ]->
    [ St_N_1($N, S, $V, pkS) ]

rule Init_Signee:
    [ !PublicKey(S, pkS), !SharedKey(S, V, shared) ]
  --[ Create(V, 'Signee'), SignerKey(pkS) ]->
    [ St_V_1(V, S, pkS, shared) ]

rule Init_Signer:
    [ !SecretKey(S, skS), !SharedKey(S, V, shared) ]
  --[ CreateSigner(S, skS, 'Signer') ]->
    [ St_S_1(S, V, skS, shared) ]


/*
 *	Protocol
 *
 */



rule Network_Send_1:
  let
  	request = <~data, ~from, ~to>
  in
    [ St_N_1($N, S, $V, pk(skS)), Fr(~data), Fr(~from), Fr(~to) ]
  --[ Send($N, request) ]->
    [ St_N_2($N, S, $V, pk(skS), request), Out(request) ]


rule Signee_Send_1:
  let
  	assertion = <data, from, to>
  	id = h(assertion)
  	mac = senc(<id, assertion>, shared)
  in
    [ St_V_1(V, S, pk(skS), shared), In(<data, from, to>) ]
  --[ Recv(V, <data, from, to>) ]->
    [ St_V_2(V, S, pk(skS), shared, id), Out(<id, assertion, mac>) ]


rule Signer_Receive_2:
    [ St_S_1(S, V, skS, shared), In(<some_id, some_assertion, some_mac>) ]
  --[ Recv(S, <some_id, some_assertion, some_mac>), Equal(senc(<some_id, some_assertion>, shared), some_mac) ]->
    [ St_S_2(S, V, skS, shared), ToSign(some_id, some_assertion) ]


rule Signer_Send_3:
  let
  	signature = sign{assertion}skS
  	response = <id, assertion, signature>
  in
    [ St_S_2(S, V, skS, shared), ToSign(id, assertion) ]
  --[ Send(S, response), SecretSign(skS), SecretShared(shared), Honest(S), Honest(V)]->
    [ St_S_3(S, V, skS, shared), Out(response) ]


rule Signee_Receive_3:
  let
  	response = <some_assertion, some_signature>
  in
    [ St_V_2(V, S, pk(skS), shared, id), In(<some_id, some_assertion, some_signature>) ]
  --[ Recv(V, <some_id, some_assertion, some_signature>), Equal(sign{some_assertion}skS, some_signature), Equal(id, some_id) ]->
    [ St_V_3(V, S, pk(skS), shared), Resonse(response) ]


rule Signee_Send_4:
  let
  	answer = <~tag, assertion, signature>
  in
    [ St_V_3(V, S, pk(skS), shared), Resonse(<assertion, signature>), Fr(~tag) ]
  --[ Send(V, <assertion, signature>), FinishSignee(~tag), SecretShared(shared), Honest(S), Honest(V) ]->
    [ St_V_4(V, S, pk(skS), shared), Out(answer) ]


rule Network_Receive_4:
    [ St_N_2($N, S, $V, pk(skS), request), In(<tag, assertion, signature>) ]
  --[ Recv($N, <assertion, signature>), Equal(request, assertion), Finish(tag), FinalSignature(request, signature, skS), Check(verify(signature, request, pk(skS))) ]->
    [ St_N_3($N, S, $V, pk(skS), request, signature) ]

/*
 *
 * Lemmas
 *
 */

lemma exists:
  exists-trace
  "Ex r s skS tag #i #k. FinishSignee(tag)@k & Finish(tag)@i & #k < #i & not(Ex B #j. Reveal(B)@j) & (FinalSignature(r, s, skS)@i & Check(true)@i)"

lemma ValidSignature:
	all-traces
  "All r s skS #i. FinalSignature(r, s, skS)@i & (s = sign{r}skS) ==> Check(true)@i"

lemma SecretSigningKey:
  all-traces
  "All k #i. SecretSign(k)@i ==> (not(Ex #j. K(k)@j)) | (Ex B #j. Reveal(B)@j & Honest(B)@i)"

lemma SecretSharedKey:
  all-traces
  "All k #i. SecretShared(k)@i ==> (not(Ex #j. K(k)@j)) | (Ex B #j. Reveal(B)@j & Honest(B)@i)"

/*
 *
 * Restrictions
 *
 */

restriction Equal:
   "All x y #i. Equal(x, y)@i ==> x = y" 

restriction OnlyOneSigner:
	"All S1 S2 k1 k2 #i #j. CreateSigner(S1, k1, 'Signer')@i & CreateSigner(S2, k2, 'Signer')@j ==> #i = #j"

restriction OnlyOneSignee:
	"All S1 S2 #i #j. Create(S1, 'Signee')@i & Create(S2, 'Signee')@j ==> #i = #j"

restriction SameSignerPublic:
  "All k1 k2 #i #j. SignerKey(k1)@i & SignerKey(k2)@j & not(#i = #j) ==> k1 = k2 & (Ex k S #m. CreateSigner(S, k, 'Signer')@m & k1 = pk(k))"

end