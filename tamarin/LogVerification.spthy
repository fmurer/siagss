/*
 *  Author: Fabian Murer
 *  Model Name: LogVerification.spthy
 *  Status: DEVELOPMENTAL
 *
 *  Comments: This protocol is used for log verification
 *
 *  h is the latest epoch identifier known by the administrator
 *  n is a freshly generated nonce
 *  L are the log entries starting at the epoch identifier h and goes to the latest
 *  h_l is the latest epoch identifier
 *
 *  S  <-  V 	: Sign(h, n)
 *	S  ->  V 	: Sign(L, h_l, n)
 */

theory LogVerification
begin

builtins: signing


// Public key infrastructure

rule Register:
    [ Fr(~sk) ] 
  --> 
    [ !SecretKey($A, ~sk), !PublicKey($A, pk(~sk)), Out(pk(~sk)) ]

rule Reveal:
    [ !SecretKey(A, ltk) ]
  --[ Reveal(A) ]->
    [ Out(ltk) ]


// Initialisation

rule Init_Signer:
    [ !SecretKey(S, skS), !PublicKey(V1, pkV1), !PublicKey(V2, pkV2), !PublicKey(V3, pkV3) ]
	--[ Create(S, 'Signer'), Diff(pkV1, pkV2), Diff(pkV1, pkV3), Diff(pkV2, pkV3) ]->
    [ St_S_1(S, skS, <pkV1, pkV2, pkV3>) ]

rule Init_Verifier:
    [ Fr(~id), !SecretKey(V, skV), !PublicKey(S, pkS) ]
	--[ Create(V, 'Verifier') ]->
    [ St_V_1(V, S, skV, pkS) ]


// Protocol

rule V_1_Send:
    [ St_V_1(V, S, skV, pkS), Fr(~nonce), Fr(~hash) ]
	--[ Send(V, sign{~hash, ~nonce}skV) ]->
    [ St_V_2(V, S, skV, pkS, ~nonce, ~hash), Out(sign{~hash, ~nonce}skV) ]

rule S_1_Receive:
    [ St_S_1(S, skS, <pkV1, pkV2, pkV3>), In(sign{hash, n}skV) ]
	--[ Recv($V, sign{hash, n}skV), Included(pk(skV), <pkV1, pkV2, pkV3>) ]->
    [ St_S_2(S, skS, <pkV1, pkV2, pkV3>, hash, n, pk(skV)) ]


rule S_2_Send:
    [ St_S_2(S, skS, <pkV1, pkV2, pkV3>, hash, n, admin), Fr(~L), Fr(~h_new) ]
	--[ Send(S, sign{~L, ~h_new, n}skS), Running(pk(skS), admin, <'I', 'R', <~L, ~h_new, n>>) ]->
    [ St_S_3(S, skS, <pkV1, pkV2, pkV3>, hash, n, ~L), Out(sign{~L, ~h_new, n}skS) ]

rule V_2_Receive:
    [ St_V_2(V, S, skV, pk(skS), nonce, hash), In(sign{log, new_hash, nonce}skS) ]
	--[ Recv(S, sign{log, new_hash, nonce}skS), Commit(pk(skV), pk(skS), <'I', 'R', <log, new_hash, nonce>>), Honest(S), Honest(V), Finish(V) ]->
    [ St_V_3(V, S, skV, pk(skS), nonce, hash, log, new_hash) ]



// Security Properties

lemma executeability:
	exists-trace
		"Ex A #i. Finish(A)@i"

lemma noninjectiveagreementINITIATOR:
  "All a b t #i. 
    Commit(a,b,<'I','R',t>) @i
    ==> (Ex #j. Running(b,a,<'I','R',t>) @j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

lemma injectiveagreementINITIATOR:
  "All a b t #i. 
    Commit(a,b,<'I','R',t>) @i
    ==> (Ex #j. Running(b,a,<'I','R',t>) @j 
        & j < i
        & not (Ex a2 b2 #i2. Commit(a2,b2,<'I','R',t>) @i2
                           & not (#i2 = #i)))
              | (Ex X #r. Reveal(X)@r & Honest(X) @i)"



// Restrictions

restriction Included:
  " All p1 p2 p3 p4 #i. Included(p1, <p2, p3, p4>)@i ==> p1 = p2 | p1 = p3 | p1 = p4"

restriction Equal:
  "All x y #i. Equal(x, y)@i ==> x = y"

restriction Diff:
  "All x y #i. Diff(x, y)@i ==> not(x = y)"

end
