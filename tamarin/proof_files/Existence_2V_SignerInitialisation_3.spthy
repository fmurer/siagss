theory SignerInitialisation_3 begin

// Function signature and definition of the equational theory E

functions: extract/2, fst/1, h/1, pair/2, pk/1, sign/2, snd/1,
           true/0, verify/3
equations:
    extract(sign(m, skS), pk(skS)) = m,
    fst(<x.1, x.2>) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

rule (modulo E) Register:
   [ Fr( ~sk ) ]
  -->
   [ !SecretKey( $A, ~sk ), !PublicKey( $A, pk(~sk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal:
   [ !SecretKey( A, ltk ) ] --[ Reveal( A ) ]-> [ Out( ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_Config:
   [ Fr( ~N ), Fr( ~t ) ] --> [ !Config( ~N, ~t ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_Signer:
   [ !SecretKey( $TPM, skTPM ) ]
  --[ Create( $S, skTPM, 'Signer' ) ]->
   [ St_S_1( $S, skTPM ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_Verifier:
   [ !SecretKey( $V, skV ), !PublicKey( $TPM, pkTPM ), !Config( N, t )
   ]
  --[ Create( $V, skV, 'Verifier' ), TPM( $V, pkTPM ) ]->
   [ St_V_1( $V, skV, pkTPM, <N, t> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Verifier_Send_Init_1:
   [ St_V_1( $V, skV, pk(skTPM), <N, t> ) ]
  --[ Send( $V, <<N, t>, pk(skV)> ) ]->
   [ St_V_2( $V, skV, pk(skTPM), <N, t> ), Out( <<N, t>, pk(skV)> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Signer_Receive_Init_1:
   [ St_S_1( $S, skTPM ), In( <<N, t>, pkV> ) ]
  --[ Recv( $S, <<N, t>, pkV> ) ]->
   [ St_S_2( $S, skTPM, pkV, <N, t> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Signer_Receive_Init_2:
   [ St_S_2( $S, skTPM, pkV1, <N, t> ), In( <<N, t>, pkV> ) ]
  --[ Recv( $S, <<N, t>, pkV> ), Diff( pkV1, pkV ) ]->
   [ St_S_3( $S, skTPM, <pkV1, pkV>, <N, t> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Signer_Receive_Init_3:
   [ St_S_3( $S, skTPM, <pkV1, pkV2>, <N, t> ), In( <<N, t>, pkV> ) ]
  --[ Recv( $S, <<N, t>, pkV> ), Diff( pkV1, pkV ), Diff( pkV2, pkV )
  ]->
   [ St_S_4( $S, skTPM, <pkV1, pkV2, pkV>, <N, t> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Signer_Send_OK:
   [
   St_S_4( $S, skTPM, <pkV1, pkV2, pkV3>, <N, t> ),
   !SecretKey( $S, skS )
   ]
  --[ Send( $S, sign('ok', skTPM) ), GenKey( $S, skS ) ]->
   [
   St_S_5( $S, skTPM, <pkV1, pkV2, pkV3>, <N, t>, skS ),
   Out( sign('ok', skTPM) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Verifier_Receive_OK:
   [ St_V_2( $V, skV, pk(skTPM), <N, t> ), In( msg ) ]
  --[ Equal( verify(msg, 'ok', pk(skTPM)), true ) ]->
   [ St_V_3( $V, skV, pk(skTPM), <N, t> ) ]

  /*
  rule (modulo AC) Verifier_Receive_OK:
     [ St_V_2( $V, skV, pk(skTPM), <N, t> ), In( msg ) ]
    --[ Equal( z, true ) ]->
     [ St_V_3( $V, skV, pk(skTPM), <N, t> ) ]
    variants (modulo AC)
    1. msg   = msg.8
       skTPM = skTPM.8
       z     = verify(msg.8, 'ok', pk(skTPM.8))
    
    2. msg   = sign('ok', x.8)
       skTPM = x.8
       z     = true
  */

rule (modulo E) Verifier_Send_Nonce:
   [ St_V_3( $V, skV, pk(skTPM), <N, t> ), Fr( ~nonce ) ]
  --[ Send( $V, sign(~nonce, skV) ) ]->
   [
   St_V_4( $V, skV, pk(skTPM), <N, t>, ~nonce ),
   Out( sign(~nonce, skV) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Signer_Receive_Nonce_1:
   [
   St_S_5( $S, skTPM, <pkV1, pkV2, pkV3>, <N, t>, skS ),
   In( sign(nonce, skV) )
   ]
  --[ Recv( $S, nonce ), Included( pk(skV), <pkV1, pkV2, pkV3> ) ]->
   [
   St_S_6( $S, skTPM, <pkV1, pkV2, pkV3>, pk(skV), <N, t>, skS, nonce
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Signer_Send_Anwer_1:
   [
   St_S_6( $S, skTPM, <pkV1, pkV2, pkV3>, pk1, <N, t>, skS, nonce ),
   Fr( ~id )
   ]
  --[
  Send( $S,
        <<pkV1, pkV2, pkV3>, pk(skS), 
         sign(<~id, nonce, h(<pk(skS), <N, t>, pkV1, pkV2, pkV3>)>, skTPM)>
  )
  ]->
   [
   St_S_7( $S, skTPM, <pkV1, pkV2, pkV3>, pk1, <N, t>, skS ),
   Out( <<pkV1, pkV2, pkV3>, pk(skS), 
         sign(<~id, nonce, h(<pk(skS), <N, t>, pkV1, pkV2, pkV3>)>, skTPM)>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Signer_Receive_Nonce_2:
   [
   St_S_7( $S, skTPM, <pkV1, pkV2, pkV3>, pk1, <N, t>, skS ),
   In( sign(nonce, skV) )
   ]
  --[
  Recv( $S, nonce ), Included( pk(skV), <pkV1, pkV2, pkV3> ),
  Diff( pk1, pk(skV) )
  ]->
   [
   St_S_8( $S, skTPM, <pkV1, pkV2, pkV3>, <pk1, pk(skV)>, <N, t>, skS,
           nonce
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Signer_Send_Anwer_2:
   [
   St_S_8( $S, skTPM, <pkV1, pkV2, pkV3>, <pk1, pk2>, <N, t>, skS,
           nonce
   ),
   Fr( ~id )
   ]
  --[
  Send( $S,
        <<pkV1, pkV2, pkV3>, pk(skS), 
         sign(<~id, nonce, h(<pk(skS), <N, t>, pkV1, pkV2, pkV3>)>, skTPM)>
  )
  ]->
   [
   St_S_9( $S, skTPM, <pkV1, pkV2, pkV3>, <pk1, pk2>, <N, t>, skS ),
   Out( <<pkV1, pkV2, pkV3>, pk(skS), 
         sign(<~id, nonce, h(<pk(skS), <N, t>, pkV1, pkV2, pkV3>)>, skTPM)>
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Verifier_Receive_Final:
   [
   St_V_4( $V, skV, pk(skTPM), <N, t>, nonce ),
   In( <<pkV1, pkV2, pkV3>, pkS, 
        sign(<id, nonce_new, h(<pkS, <N, t>, pkV1, pkV2, pkV3>)>, skTPM)>
   )
   ]
  --[
  Recv( $V,
        <id, <pkV1, pkV2, pkV3>, pkS, 
         sign(<id, nonce_new, h(<pkS, <N, t>, pkV1, pkV2, pkV3>)>, skTPM)>
  ),
  Equal( nonce, nonce_new ), Included( pk(skV), <pkV1, pkV2, pkV3> ),
  Finish( )
  ]->
   [
   St_V_5( $V, skV, pk(skTPM), <N, t>, nonce, id, pkS,
           <pkV1, pkV2, pkV3>
   )
   ]

  /* has exactly the trivial AC variant */

lemma exists:
  exists-trace
  "∃ #i #j. ((Finish( ) @ #i) ∧ (Finish( ) @ #j)) ∧ (¬(#i = #j))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i #j. (Finish( ) @ #i) ∧ (Finish( ) @ #j) ∧ ¬(#i = #j)"
*/
induction
  case empty_trace
  by contradiction /* from formulas */
next
  case non_empty_trace
  simplify
  solve( !KU( sign(<id, nonce, h(<pkS, <N, t>, pkV1, pkV2, pkV3>)>,
                   skTPM)
         ) @ #vk.8 )
    case Signer_Send_Anwer_1_case_1
    solve( St_V_4( $V, skV, pk(~sk), <N, t>, nonce ) ▶₀ #i )
      case Verifier_Send_Nonce
      solve( !KU( sign(~nonce, skV.1) ) @ #vk.21 )
        case Signer_Send_Anwer_1_case_1
        by contradiction /* cyclic */
      next
        case Signer_Send_Anwer_1_case_2
        by contradiction /* cyclic */
      next
        case Signer_Send_Anwer_1_case_3
        by contradiction /* cyclic */
      next
        case Signer_Send_Anwer_2_case_1
        by contradiction /* cyclic */
      next
        case Signer_Send_Anwer_2_case_2
        by contradiction /* cyclic */
      next
        case Signer_Send_Anwer_2_case_3
        by contradiction /* cyclic */
      next
        case Signer_Send_Anwer_2_case_4
        by contradiction /* cyclic */
      next
        case Signer_Send_Anwer_2_case_5
        by contradiction /* cyclic */
      next
        case Signer_Send_Anwer_2_case_6
        by contradiction /* cyclic */
      next
        case Verifier_Send_Nonce
        solve( !KU( sign('ok', ~sk.1) ) @ #vk.25 )
          case Signer_Send_Anwer_1_case_1
          by contradiction /* cyclic */
        next
          case Signer_Send_Anwer_1_case_2
          by contradiction /* cyclic */
        next
          case Signer_Send_Anwer_1_case_3
          by contradiction /* cyclic */
        next
          case Signer_Send_Anwer_2_case_1
          by contradiction /* cyclic */
        next
          case Signer_Send_Anwer_2_case_2
          by contradiction /* cyclic */
        next
          case Signer_Send_Anwer_2_case_3
          by contradiction /* cyclic */
        next
          case Signer_Send_Anwer_2_case_4
          by contradiction /* cyclic */
        next
          case Signer_Send_Anwer_2_case_5
          by contradiction /* cyclic */
        next
          case Signer_Send_Anwer_2_case_6
          by contradiction /* cyclic */
        next
          case Signer_Send_OK
          solve( !KU( ~N ) @ #vk.24 )
            case Signer_Send_Anwer_1_case_1
            by contradiction /* cyclic */
          next
            case Signer_Send_Anwer_1_case_2
            by contradiction /* cyclic */
          next
            case Signer_Send_Anwer_1_case_3
            by contradiction /* cyclic */
          next
            case Signer_Send_Anwer_2_case_1
            by contradiction /* cyclic */
          next
            case Signer_Send_Anwer_2_case_2
            by contradiction /* cyclic */
          next
            case Signer_Send_Anwer_2_case_3
            by contradiction /* cyclic */
          next
            case Signer_Send_Anwer_2_case_4
            by contradiction /* cyclic */
          next
            case Signer_Send_Anwer_2_case_5
            by contradiction /* cyclic */
          next
            case Signer_Send_Anwer_2_case_6
            by contradiction /* cyclic */
          next
            case Verifier_Send_Init_1
            solve( !KU( ~t ) @ #vk.25 )
              case Signer_Send_Anwer_1_case_1
              by contradiction /* cyclic */
            next
              case Signer_Send_Anwer_1_case_2
              by contradiction /* cyclic */
            next
              case Signer_Send_Anwer_1_case_3
              by contradiction /* cyclic */
            next
              case Signer_Send_Anwer_2_case_1
              by contradiction /* cyclic */
            next
              case Signer_Send_Anwer_2_case_2
              by contradiction /* cyclic */
            next
              case Signer_Send_Anwer_2_case_3
              by contradiction /* cyclic */
            next
              case Signer_Send_Anwer_2_case_4
              by contradiction /* cyclic */
            next
              case Signer_Send_Anwer_2_case_5
              by contradiction /* cyclic */
            next
              case Signer_Send_Anwer_2_case_6
              by contradiction /* cyclic */
            next
              case Verifier_Send_Init_1
              solve( (#vr.20 = #vr.14)  ∥ (pk(~sk.4) = pk(~sk.1)) )
                case case_1
                solve( (pk(~sk) = pkV1)  ∥ (pk(~sk) = pkV2)  ∥ (pk(~sk) = pkV3) )
                  case case_1
                  solve( !KU( pk(~sk) ) @ #vk.12 )
                    case Signer_Send_Anwer_1_case_1
                    by contradiction /* cyclic */
                  next
                    case Signer_Send_Anwer_1_case_2
                    by contradiction /* cyclic */
                  next
                    case Signer_Send_Anwer_1_case_3
                    by contradiction /* cyclic */
                  next
                    case Signer_Send_Anwer_1_case_4
                    by contradiction /* cyclic */
                  next
                    case Signer_Send_Anwer_2_case_1
                    by contradiction /* cyclic */
                  next
                    case Signer_Send_Anwer_2_case_2
                    by contradiction /* cyclic */
                  next
                    case Signer_Send_Anwer_2_case_3
                    by contradiction /* cyclic */
                  next
                    case Signer_Send_Anwer_2_case_4
                    by contradiction /* cyclic */
                  next
                    case Signer_Send_Anwer_2_case_5
                    by contradiction /* cyclic */
                  next
                    case Signer_Send_Anwer_2_case_6
                    by contradiction /* cyclic */
                  next
                    case Signer_Send_Anwer_2_case_7
                    by contradiction /* cyclic */
                  next
                    case Verifier_Send_Init_1
                    solve( (#vr.14 = #vr.22)  ∥ (pk(~sk.1) = pk(~sk.3)) )
                      case case_1
                      solve( !KU( pk(~sk.2) ) @ #vk.16 )
                        case Signer_Send_Anwer_1_case_1
                        solve( !KU( sign(<id.1, nonce.1, 
                                          h(<pkS, <N.1, t.1>, pkV1, pkV2.1, pkV3.1>)>,
                                         skTPM)
                               ) @ #vk.25 )
                          case Signer_Send_Anwer_1_case_1
                          solve( St_V_4( $V.1, skV, pk(~sk.1), <~N, ~t>, ~nonce ) ▶₀ #j )
                            case Verifier_Send_Nonce
                            by contradiction /* from formulas */
                          qed
                        next
                          case Signer_Send_Anwer_1_case_2
                          by contradiction /* impossible chain */
                        next
                          case Signer_Send_Anwer_1_case_3
                          by contradiction /* impossible chain */
                        next
                          case Signer_Send_Anwer_1_case_4
                          by contradiction /* impossible chain */
                        next
                          case Signer_Send_Anwer_2_case_1
                          solve( St_V_4( $V.1, skV, pk(~sk.1), <~N, ~t>, nonce.1 ) ▶₀ #j )
                            case Verifier_Send_Nonce
                            solve( !KU( sign(~nonce.1, skV) ) @ #vk.20 )
                              case Signer_Send_Anwer_1_case_1
                              by contradiction /* impossible chain */
                            next
                              case Signer_Send_Anwer_1_case_2
                              by contradiction /* impossible chain */
                            next
                              case Signer_Send_Anwer_1_case_3
                              by contradiction /* impossible chain */
                            next
                              case Signer_Send_Anwer_2_case_1
                              by contradiction /* cyclic */
                            next
                              case Signer_Send_Anwer_2_case_2
                              by contradiction /* cyclic */
                            next
                              case Signer_Send_Anwer_2_case_3
                              by contradiction /* cyclic */
                            next
                              case Signer_Send_Anwer_2_case_4
                              by contradiction /* cyclic */
                            next
                              case Signer_Send_Anwer_2_case_5
                              by contradiction /* cyclic */
                            next
                              case Signer_Send_Anwer_2_case_6
                              by contradiction /* cyclic */
                            next
                              case Verifier_Send_Nonce
                              solve( (pk(~sk.3) = pk(~sk))  ∥ (pk(~sk.3) = pkV2)  ∥
                                     (pk(~sk.3) = pkV3) )
                                case case_1
                                by contradiction /* from formulas */
                              next
                                case case_2
                                solve( !KU( pk(~sk.2) ) @ #vk.19 )
                                  case Signer_Send_Anwer_1_case_1
                                  by contradiction /* cyclic */
                                next
                                  case Signer_Send_Anwer_1_case_2
                                  by contradiction /* cyclic */
                                next
                                  case Signer_Send_Anwer_1_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Signer_Send_Anwer_1_case_4
                                  by contradiction /* cyclic */
                                next
                                  case Signer_Send_Anwer_2_case_1
                                  by contradiction /* cyclic */
                                next
                                  case Signer_Send_Anwer_2_case_2
                                  by contradiction /* cyclic */
                                next
                                  case Signer_Send_Anwer_2_case_3
                                  by contradiction /* cyclic */
                                next
                                  case Signer_Send_Anwer_2_case_4
                                  by contradiction /* cyclic */
                                next
                                  case Signer_Send_Anwer_2_case_5
                                  by contradiction /* cyclic */
                                next
                                  case Signer_Send_Anwer_2_case_6
                                  by contradiction /* cyclic */
                                next
                                  case Verifier_Send_Init_1
                                  solve( (#vr.14 = #vr.33)  ∥ (pk(~sk.1) = pk(~sk.4)) )
                                    case case_1
                                    by contradiction /* from formulas */
                                  next
                                    case case_2
                                    solve( (#i < #j)  ∥ (#j < #i) )
                                      case case_1
                                      SOLVED // trace found
                                    next
                                      case case_2
                                      SOLVED // trace found
                                    qed
                                  qed
                                next
                                  case c_pk
                                  by sorry
                                qed
                              next
                                case case_3
                                by sorry
                              qed
                            next
                              case c_sign
                              by sorry
                            qed
                          qed
                        next
                          case Signer_Send_Anwer_2_case_2
                          by contradiction /* from formulas */
                        next
                          case Signer_Send_Anwer_2_case_3
                          by contradiction /* from formulas */
                        next
                          case Signer_Send_Anwer_2_case_4
                          by sorry
                        next
                          case Signer_Send_Anwer_2_case_5
                          by contradiction /* from formulas */
                        next
                          case Signer_Send_Anwer_2_case_6
                          by sorry
                        next
                          case Signer_Send_Anwer_2_case_7
                          by contradiction /* from formulas */
                        next
                          case c_sign
                          by sorry
                        qed
                      next
                        case Signer_Send_Anwer_1_case_2
                        by contradiction /* impossible chain */
                      next
                        case Signer_Send_Anwer_1_case_3
                        by contradiction /* impossible chain */
                      next
                        case Signer_Send_Anwer_1_case_4
                        by contradiction /* impossible chain */
                      next
                        case Signer_Send_Anwer_2_case_1
                        by sorry
                      next
                        case Signer_Send_Anwer_2_case_2
                        by contradiction /* from formulas */
                      next
                        case Signer_Send_Anwer_2_case_3
                        by contradiction /* from formulas */
                      next
                        case Signer_Send_Anwer_2_case_4
                        by sorry
                      next
                        case Signer_Send_Anwer_2_case_5
                        by contradiction /* from formulas */
                      next
                        case Signer_Send_Anwer_2_case_6
                        by sorry
                      next
                        case Signer_Send_Anwer_2_case_7
                        by contradiction /* from formulas */
                      next
                        case Verifier_Send_Init_1
                        by sorry
                      next
                        case c_pk
                        by sorry
                      qed
                    next
                      case case_2
                      by sorry
                    qed
                  next
                    case c_pk
                    by sorry
                  qed
                next
                  case case_2
                  by sorry
                next
                  case case_3
                  by sorry
                qed
              next
                case case_2
                by sorry
              qed
            qed
          qed
        next
          case c_sign
          by sorry
        qed
      next
        case c_sign
        by sorry
      qed
    qed
  next
    case Signer_Send_Anwer_1_case_2
    by sorry
  next
    case Signer_Send_Anwer_1_case_3
    by sorry
  next
    case Signer_Send_Anwer_1_case_4
    by sorry
  next
    case Signer_Send_Anwer_2_case_1
    by sorry
  next
    case Signer_Send_Anwer_2_case_2
    by sorry
  next
    case Signer_Send_Anwer_2_case_3
    by sorry
  next
    case Signer_Send_Anwer_2_case_4
    by sorry
  next
    case Signer_Send_Anwer_2_case_5
    by sorry
  next
    case Signer_Send_Anwer_2_case_6
    by sorry
  next
    case Signer_Send_Anwer_2_case_7
    by sorry
  next
    case c_sign
    by sorry
  qed
qed

restriction Equal:
  "∀ x y #i. (Equal( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction Diff:
  "∀ x y #i. (Diff( x, y ) @ #i) ⇒ (¬(x = y))"
  // safety formula

restriction SameTPM:
  "∀ V1 V2 tpm1 tpm2 #i #j.
    (((TPM( V1, tpm1 ) @ #i) ∧ (TPM( V2, tpm2 ) @ #j)) ∧
     (¬(#i = #j))) ⇒
    (tpm1 = tpm2)"
  // safety formula

restriction OnlyOneSigner:
  "∀ S1 S2 id1 id2 #i #j.
    ((Create( S1, id1, 'Signer' ) @ #i) ∧
     (Create( S2, id2, 'Signer' ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

restriction Included:
  "∀ p1 p2 p3 p4 #i.
    (Included( p1, <p2, p3, p4> ) @ #i) ⇒
    (((p1 = p2) ∨ (p1 = p3)) ∨ (p1 = p4))"
  // safety formula

/* All well-formedness checks were successful. */

end