/*
 *  Author: Fabian Murer
 *  Model Name: SignerInitialisation.spthy
 *  Status: DEVELOPMENTAL
 *
 *  Comments:
 */

theory SignerInitialisation
begin

builtins: signing, hashing

  
// Public key infrastructure

rule Register:
    [ Fr(~sk) ] 
  --> 
    [ !SecretKey($A, ~sk), !PublicKey($A, pk(~sk)) ]

rule Reveal:
    [ !SecretKey(A, ltk) ]
  --[ Reveal(A) ]->
    [ Out(ltk) ]

rule Init_Config:
    [ Fr(~N), Fr(~t)]
  -->
    [ !Config(~N, ~t) ]


// Initialisation

rule Init_Signer:
	[ !SecretKey($TPM, skTPM) ]
  --[ Create($S, skTPM, 'Signer') ]->
	[ St_S_1($S, skTPM) ]

rule Init_Verifier:
	[ !SecretKey($V, skV), !PublicKey($TPM, pkTPM), !Config(N, t) ]
  --[ Create($V, skV, 'Verifier'), TPM($V, pkTPM) ]->
	[ St_V_1($V, skV, pkTPM, <N, t>) ]



// Protocol

rule Verifier_Send_Init_1:
  let
  	C = <N, t>
  	request = <C, pk(skV)>
  in
    [ St_V_1($V, skV, pk(skTPM), <N, t>) ]
  --[ Send($V, request) ]->
    [ St_V_2($V, skV, pk(skTPM), <N, t>), Out(request) ]



rule Signer_Receive_Init:
    [ St_S_1($S, skTPM), In(<<N, t>, pkV1>), In(<<N, t>, pkV2>), In(<<N, t>, pkV3>) ]
  --[ Diff(pkV1, pkV2), Diff(pkV1, pkV3), Diff(pkV2, pkV3) ]->
    [ St_S_2($S, skTPM, <pkV1, pkV2, pkV3>, <N, t>) ]


rule Signer_Send_OK:
  let
    response = sign{'ok'}skTPM
  in
    [ St_S_2($S, skTPM, <pkV1, pkV2, pkV3>, <N, t>), !SecretKey($S, skS) ]
  --[ Send($S, response), GenKey($S, skS) ]->
    [ St_S_3($S, skTPM, <pkV1, pkV2, pkV3>, <N, t>, skS), Out(response) ]




rule Verifier_Receive_OK:
    [ St_V_2($V, skV, pk(skTPM), <N, t>), In(msg) ]
  --[ Equal(verify(msg, 'ok', pk(skTPM)), true)]->
    [ St_V_3($V, skV, pk(skTPM), <N, t>) ]



rule Verifier_Send_Nonce:
	let
		toSend = sign{~nonce}skV
	in
    [ St_V_3($V, skV, pk(skTPM), <N, t>), Fr(~nonce) ]
  --[ Send($V, toSend) ]->
    [ St_V_4($V, skV, pk(skTPM), <N, t>, ~nonce), Out(toSend) ]




rule Signer_Receive_Nonce_1:
    [ St_S_3($S, skTPM, <pkV1, pkV2, pkV3>, <N, t>, skS), In(sign{nonce}skV) ]
  --[ Recv($S, nonce), Included(pk(skV), <pkV1, pkV2, pkV3>) ]->
    [ St_S_4($S, skTPM, <pkV1, pkV2, pkV3>, <pk(skV)>, <N, t>, skS, nonce) ]

rule Signer_Send_Anwer_1:
  let
  	C = <N, t>
  	lambda = <pkV1, pkV2, pkV3>
  	M = h(pk(skS), C, lambda)
  	signed = sign{~id, nonce, M}skTPM
  	response = <lambda, pk(skS), signed>
  in
    [ St_S_4($S, skTPM, <pkV1, pkV2, pkV3>, <pk1>, <N, t>, skS, nonce), Fr(~id)]
  --[ Send($S, response) ]->
    [ St_S_5($S, skTPM, <pkV1, pkV2, pkV3>, <pk1>, <N, t>, skS), Out(response) ]



rule Signer_Receive_Nonce_2:
    [ St_S_5($S, skTPM, <pkV1, pkV2, pkV3>, <pk1>, <N, t>, skS), In(sign{nonce}skV) ]
  --[ Recv($S, nonce), Included(pk(skV), <pkV1, pkV2, pkV3>), Diff(pk1, pk(skV)) ]->
    [ St_S_6($S, skTPM, <pkV1, pkV2, pkV3>, <pk1, pk(skV)>, <N, t>, skS, nonce) ]

rule Signer_Send_Anwer_2:
  let
    C = <N, t>
    lambda = <pkV1, pkV2, pkV3>
    M = h(pk(skS), C, lambda)
    signed = sign{~id, nonce, M}skTPM
    response = <lambda, pk(skS), signed>
  in
    [ St_S_6($S, skTPM, <pkV1, pkV2, pkV3>, <pk1, pk2>, <N, t>, skS, nonce), Fr(~id)]
  --[ Send($S, response) ]->
    [ St_S_7($S, skTPM, <pkV1, pkV2, pkV3>, <pk1, pk2>, <N, t>, skS), Out(response) ]




rule Signer_Receive_Nonce_3:
    [ St_S_7($S, skTPM, <pkV1, pkV2, pkV3>, <pk1, pk2>, <N, t>, skS), In(sign{nonce}skV) ]
  --[ Recv($S, nonce), Included(pk(skV), <pkV1, pkV2, pkV3>), Diff(pk1, pk(skV)), Diff(pk2, pk(skV)) ]->
    [ St_S_8($S, skTPM, <pkV1, pkV2, pkV3>, <pk1, pk2, pk(skV)>, <N, t>, skS, nonce) ]

rule Signer_Send_Anwer_3:
  let
    C = <N, t>
    lambda = <pkV1, pkV2, pkV3>
    M = h(pk(skS), C, lambda)
    signed = sign{~id, nonce, M}skTPM
    response = <lambda, pk(skS), signed>
  in
    [ St_S_8($S, skTPM, <pkV1, pkV2, pkV3>, <pk1, pk2, pk3>, <N, t>, skS, nonce), Fr(~id)]
  --[ Send($S, response), SignerFinish($S, <pkV1, pkV2, pkV3>) ]->
    [ St_S_9($S, skTPM, <pkV1, pkV2, pkV3>, <N, t>, skS), Out(response) ]



rule Verifier_Receive_Final:
  let
  	C = <N, t>
    lambda = <pkV1, pkV2, pkV3>
    signature = sign{id, nonce_new, h(pkS, C, lambda)}skTPM
  in
    [ St_V_4($V, skV, pk(skTPM), <N, t>, nonce), In(<lambda, pkS, signature>) ]
  --[ Recv($V, <id, lambda, pkS, signature>), Equal(nonce, nonce_new), Included(pk(skV), <pkV1, pkV2, pkV3>), Finish(), FinishKey(pkS), VerifierFinish($V, skV) ]->
    [ St_V_5($V, skV, pk(skTPM), <N, t>, nonce, id, pkS, <pkV1, pkV2, pkV3>) ]



// properties

/*
lemma exists:
	exists-trace
  "Ex #i #j #k. Finish()@i & Finish()@j & Finish()@k & not(#i = #j) & not(#i = #k) & not(#j = #k)"
*/
lemma exists_new:
  exists-trace
  "Ex S k1 k2 k3 V1 V2 V3 #a #b #c #d #e #f #g. SignerFinish(S, <pk(k1), pk(k2), pk(k3)>)@a & 
        Create(V1, k1, 'Verifier')@b & Create(V2, k2, 'Verifier')@c & Create(V3, k3, 'Verifier')@d &
        VerifierFinish(V1, k1)@e & VerifierFinish(V2, k2)@f & VerifierFinish(V3, k3)@g"

lemma realPubKey:
  "All skS1 skS2 #a #b. FinishKey(pk(skS1))@a & FinishKey(pk(skS2))@b & not(#a = #b) ==> (pk(skS1) = pk(skS2) & (Ex S #c. GenKey(S, skS1)@c))"


lemma correctVerifier:
  "All V1 V2 V3 k1 k2 k3 #a #b #c. (VerifierFinish(V1, k1)@a & VerifierFinish(V2, k2)@b & VerifierFinish(V3, k3)@c) &
      (not(#a = #b) & not(#a = #c) & not(#b = #c))
      ==> ((Ex S #j. SignerFinish(S, <pk(k1), pk(k2), pk(k3)>)@j) |
           (Ex S #j. SignerFinish(S, <pk(k1), pk(k3), pk(k2)>)@j) |
           (Ex S #j. SignerFinish(S, <pk(k2), pk(k1), pk(k3)>)@j) |
           (Ex S #j. SignerFinish(S, <pk(k2), pk(k3), pk(k1)>)@j) |
           (Ex S #j. SignerFinish(S, <pk(k3), pk(k1), pk(k2)>)@j) |
           (Ex S #j. SignerFinish(S, <pk(k3), pk(k2), pk(k1)>)@j)) "



// restrictions

restriction Equal:
  " All x y #i. Equal(x, y)@i ==> x = y "

restriction Diff:
	" All x y #i. Diff(x, y)@i ==> not(x = y) "

restriction SameTPM:
 	" All V1 V2 tpm1 tpm2 #i #j. TPM(V1, tpm1)@i & TPM(V2, tpm2)@j & not(#i = #j) ==> tpm1 = tpm2 "

restriction OnlyOneSigner:
	" All S1 S2 id1 id2 #i #j. Create(S1, id1, 'Signer')@i& Create(S2, id2, 'Signer')@j ==> #i = #j "

restriction Included:
  " All p1 p2 p3 p4 #i. Included(p1, <p2, p3, p4>)@i ==> p1 = p2 | p1 = p3 | p1 = p4"

restriction AllDifferentVerifier:
  " All V1 V2 k1 k2 #a #b. Create(V1, k1, 'Verifier')@a & Create(V2, k2, 'Verifier')@b & k1 = k2 ==> #a = #b

  "

end
