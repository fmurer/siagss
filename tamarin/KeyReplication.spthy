/*
 *  Author: Fabian Murer
 *  Model Name: 
 *  Status: DEVELOPMENTAL
 *
 *  Comments:
 */

theory KeyReplication
begin

builtins: asymmetric-encryption, signing

// Public key infrastructure

rule Register:
    [ Fr(~sk) ] 
  --> 
    [ !SecretKey($A, ~sk), !PublicKey($A, pk(~sk)), Out(pk(~sk)) ]

rule Reveal:
    [ !SecretKey(A, ltk) ]
  --[ Reveal(A) ]->
    [ Out(ltk) ]


// Initialisation

rule Init_Signer:
	[ Fr(~id), !SecretKey($S, skS), !PublicKey($V, pkV) ]
	--[ Create($S, ~id, 'roleS'), Public_Verifyer($S, pkV) ]->
	[ St_S_1($S, ~id, $V, skS, pkV) ]

rule Init_Verifier:
	[ Fr(~id), !SecretKey($V, skV), !PublicKey($S, pkS), !PublicKey($B, pkB) ]
	--[ Create($V, ~id, 'roleV') ]->
	[ St_V_1($V, ~id, $S, $B, skV, pkS, pkB) ]

rule Init_Backup:
	[ Fr(~id), !SecretKey($B, skB), !PublicKey($V, pkV) ]
	--[ Create($B, ~id, 'roleB'), Public_Verifyer($B, pkV) ]->
	[ St_B_1($B, ~id, $V, skB, pkV) ]


// Protocol

rule V_1_Send:
	[ St_V_1($V, id, $S, $B, skV, pkS, pkB) ]
	--[ Send($V, sign{pkB, id }skV) ]->
	[ St_V_2($V, id, $S, $B, skV, pkS, pkB), Out(sign{pkB, id}skV) ]

rule S_1_Receive:
	[ St_S_1($S, id, $V, skS, pk(skV)), In(sign{pkB, id_v}skV) ]
	--[ Recv($V, sign{pkB, id_v}skV) ]->
	[ St_S_2($S, id, $V, skS, pk(skV), pkB, id_v) ]


rule S_2_Send:
	[ St_S_2($S, id, $V, skS, pk(skV), pk(skB), id_v) ]
	--[ Send($S, sign{id_v, aenc(skS, pk(skB))}skS), Secret($S, skS) ]->
	[ St_S_3($S, id, $V, skS, pk(skV), pk(skB), id_v), Out(sign{id_v, aenc(skS, pk(skB))}skS) ]

rule V_2_Receive:
	[ St_V_2($V, id, $S, $B, skV, pk(skS), pk(skB)), In(sign{id_v, m}skS) ]
	--[ Recv($S, sign{m}skS), Equal(id, id_v) ]->
	[ St_V_3($V, id, $S, $B, skV, pk(skS), pk(skB), m) ]


rule V_3_Send:
	[ St_V_3($V, id, $S, $B, skV, pk(skS), pk(skB), m) ]
	--[ Send($V, sign{m}skV) ]->
	[ St_V_4($V, id, $S, $B, skV, pk(skS), pk(skB), m), Out(sign{m}skV) ]

rule B_3_Receive:
	[ St_B_1($B, id, $V, skB, pk(skV)), In(sign{aenc(skS, pk(skB))}skV) ]
	--[ Recv($V, sign{aenc(skS, pk(skB))}skV), Finish($B), Secret($B, skS) ]->
	[ St_B_2($B, id, $V, skB, pk(skV), skS) ]


// Security Properties

lemma executeability:
	exists-trace
		"Ex B #i. Finish(B)@i"

lemma secrecy:
  "All A x #i. 
    Secret(A,x) @i ==> 
    not (Ex #j. K(x)@j)
        | (Ex X #r. Reveal(X)@r)"

restriction same_public_keys:
	"All X Y pk1 pk2 #i #j. Public_Verifyer(X, pk1)@i & Public_Verifyer(Y, pk2)@j & not(#i = #j) ==> pk1 = pk2"

restriction same_id:
	"All x y #i. Equal(x, y)@i ==> x = y"


end